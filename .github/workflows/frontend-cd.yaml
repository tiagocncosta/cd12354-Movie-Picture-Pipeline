name: Frontend Continuous Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - starter/frontend


jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: Node 18
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: starter/frontend/package-lock.json

    - name: install dependencies
      working-directory: starter/frontend
      run: |
        echo "Installing dependencies..."
        npm ci

    - name: lint
      run: |
        echo "Running lint..."
        cd starter/frontend && npm run lint

  test:
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: node 18
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: starter/frontend/package-lock.json

    - name: install dependencies
      working-directory: starter/frontend
      run: |
        echo "Installing dependencies..."
        npm ci

    - name: test
      run: |
        echo "Installing dependencies..."
        cd starter/frontend && npm run test

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]

    env:
      ECR_REPO_NAME: '038131199487.dkr.ecr.us-east-1.amazonaws.com/frontend'
      CONTAINER_TAG: 'latest'
      API_URL: 'http://localhost:5000'
      AWS_REGION: 'us-east-1'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Use Node.js 18
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: starter/frontend/package-lock.json

    - name: configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
        aws-region: us-east-1

    - name: docker login
      run: |
        echo "Logging into Docker registry..."
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account | jq -r .)
        docker login -u AWS -p $(aws ecr get-login-password --region ${{ env.AWS_REGION }}) ${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

    - name: build and push docker image
      uses: docker/build-push-action@v2
      with:
        context: starter/frontend
        file: starter/frontend/Dockerfile
        build-args: "REACT_APP_MOVIE_API_URL=${{ env.API_URL }}"
        tags: ${{ env.ECR_REPO_NAME }}:${{ env.CONTAINER_TAG }}
        push: true

    - name: Configure Kubeconfig
      run:
        aws eks update-kubeconfig --name cluster --region us-east-1

    - name: deploy docker image to amazon EKS
      working-directory: starter/frontend/k8s
      env:
        IMAGE_TAG: latest
        REPO_NAME: frontend
      run: |
        aws eks update-kubeconfig --name cluster --region us-east-1
        kustomize edit set image frontend=${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$REPO_NAME:$IMAGE_TAG
        kustomize build | kubectl apply -f -
